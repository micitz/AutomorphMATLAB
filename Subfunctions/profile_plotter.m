% This script plots the current profile with the annotated morphometrics
% It uses the local_x_values vector
%
% Michael Itzkin, 3/26/2018
%------------------------------------------------------------------------%
sand = [0.93, 0.79, 0.69];
water = [0.51, 0.90, 0.85];
twoMeter_color = [0.25, 0.80, 0.60];
fence_toe_color = [0.55 0.57 0.67];
fence_crest_color = [0.91, 0.41, 0.17];
fence_heel_color = [0.50, 0.00, 0.90];

Title = sprintf('%s %s (Profile %d)', location(1:end-1), year, k);
profile_figure = figure('name', Title, 'Visible', 'Off');

hold on
grid on
box on

% Plot the profile and water colored in
water_level = ones(1,length(local_x_values(:,k))) * MHW;
area(local_x_values(:,k), water_level,...
    'EdgeColor', 'k',...
    'FaceColor', water,...
    'LineWidth', 1)
area(local_x_values(:,k), profiles(:,k,3),...
    'EdgeColor', 'k',...
    'FaceColor', sand,...
    'LineWidth', 1)

% Plot the ghost profile if it exists
if exist('ghostProfile')
   plot(local_x_values(:,k), ghostProfile,...
       'Color', 'k',...
       'LineStyle', '--')
end

% These are the natural features that every profile will have
p_mhw = scatter(local_x_mhw, local_y_mhw, 50,...
    'Marker', 's',...
    'MarkerFaceColor', 'yellow',...
    'MarkerEdgeColor', 'k',...
    'LineWidth', 1,...
    'DisplayName', 'MHW');
p_twoMeter = scatter(local_x_twoMeter, local_y_twoMeter, 50,...
    'Marker', 's',...
    'MarkerFaceColor', twoMeter_color,...
    'MarkerEdgeColor', 'k',...
    'LineWidth', 1,...
    'DisplayName', '2m Contour');
p_toe = scatter(local_x_toe, local_y_toe, 50,...
    'Marker', 's',...
    'MarkerFaceColor', 'blue',...
    'MarkerEdgeColor', 'k',...
    'LineWidth', 1,...
    'DisplayName', 'Toe');
p_crest = scatter(local_x_crest, local_y_crest, 50,...
    'Marker', 's',...
    'MarkerFaceColor', 'magenta',...
    'MarkerEdgeColor', 'k',...
    'LineWidth', 1,...
    'DisplayName', 'Crest');
p_heel = scatter(local_x_heel, local_y_heel, 50,...
    'Marker', 's',...
    'MarkerFaceColor', 'green',...
    'MarkerEdgeColor', 'k',...
    'LineWidth', 1,...
    'DisplayName', 'Heel');

% Make an empty list to add fenced features too for the legend
natural_features = [p_mhw, p_twoMeter, p_toe, p_crest, p_heel];
fence_features = [];

% Plot the fence if it exists on the profile and append it to the legend
if fenced==1 && exist('local_x_fence') && ~isnan(local_x_fence)
    p_fence = scatter(local_x_fence, local_y_fence, 50,...
        'Marker', 's',...
        'MarkerFaceColor', 'red',...
        'MarkerEdgeColor', 'k',...
        'LineWidth', 1,...
        'DisplayName', 'fence');
    fence_features = [fence_features, p_fence];
end

% Plot the fenced dune crest if it exists on the profile
% and append it to the legend
if fenced==1 && exist('local_x_fence_crest') && ~isnan(local_x_fence_crest)
    p_fence_crest = scatter(local_x_fence_crest, local_y_fence_crest, 50,...
        'Marker', 's',...
        'MarkerFaceColor', fence_crest_color,...
        'MarkerEdgeColor', 'k',...
        'LineWidth', 1,...
        'DisplayName', 'Fenced Dune Crest');
    fence_features = [fence_features, p_fence_crest];
end

% Plot the fenced dune heel if it exists on the profile
% and append it to the legend. Remove the natural dune toe from the legend
if fenced==1 && exist('fence_heel_index')
    p_fence_heel = scatter(local_x_fence_heel, local_y_fence_heel, 50,...
        'Marker', 's',...
        'MarkerFaceColor', fence_heel_color,...
        'MarkerEdgeColor', 'k',...
        'LineWidth', 1,...
        'DisplayName', 'Fenced Dune Heel');
    fence_features = [fence_features, p_fence_heel];
    clear fence_heel_index
end

% Plot the fenced dune crest if it exists on the profile
% and append it to the legend
if fenced==1 && exist('local_x_fence_toe')
    p_fence_toe = scatter(local_x_fence_toe, local_y_fence_toe, 50,...
        'Marker', 's',...
        'MarkerFaceColor', fence_toe_color,...
        'MarkerEdgeColor', 'k',...
        'LineWidth', 1,...
        'DisplayName', 'Fenced Dune Toe');
    fence_features = [p_fence_toe, fence_features];
end

% Plot the berm if it exists on the profile
% and append it to the legend
if exist('x_berm')
    p_fence_toe = scatter(local_x_berm, local_y_berm, 50,...
        'Marker', 's',...
        'MarkerFaceColor', 'c',...
        'MarkerEdgeColor', 'k',...
        'LineWidth', 1,...
        'DisplayName', 'Berm');
    fence_features = [p_fence_toe, fence_features];
end

legend([natural_features, fence_features], 'Location', 'northeast')
xlabel('Cross Shore Distance (m)')
ylabel('Elevation (m NAVD88)')
title(Title)

xlim([nanmin(local_x_values(:,k)) nanmax(local_x_values(:,k))])
ylim([0 12])
set(gca, 'XDir', 'Reverse')

save_name = sprintf('%s%s%s%sProfile Plots%s%s.png', location(1:end-1), filesep, year,...
    filesep, filesep, Title);
saveas(profile_figure, save_name, 'png')
close(profile_figure)





